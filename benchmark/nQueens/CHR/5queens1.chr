:- use_module(library(chr)).
:- chr_constraint fact/1, rule/4, nrule/1, nhead/1, head/2, heads/2, bodyP/2, bodyN/2, bodyC/2, launcher/0, end/0, cleaner/0, choice/1, choi_nrule/3, choi_frule/1, verified_constraint/2, bot/0.

%%Program

%% @r1  q(1,1) :- not q(1,2), not q(1,3), not q(1,4), not q(1,5)#4
%% @r2  q(1,2) :- not q(1,1), not q(1,3), not q(1,4), not q(1,5)#4
%% @r3  q(1,3) :- not q(1,1), not q(1,2), not q(1,4), not q(1,5)#4
%% @r4  q(1,4) :- not q(1,1), not q(1,2), not q(1,3), not q(1,5)#4
%% @r5  q(1,5) :- not q(1,1), not q(1,2), not q(1,3), not q(1,4)#4
%% @r6  q(2,1) :- not q(2,2), not q(2,3), not q(2,4), not q(2,5)#4
%% @r7  q(2,2) :- not q(2,1), not q(2,3), not q(2,4), not q(2,5)#4
%% @r8  q(2,3) :- not q(2,1), not q(2,2), not q(2,4), not q(2,5)#4
%% @r9  q(2,4) :- not q(2,1), not q(2,2), not q(2,3), not q(2,5)#4
%% @r10  q(2,5) :- not q(2,1), not q(2,2), not q(2,3), not q(2,4)#4
%% @r11  q(3,1) :- not q(3,2), not q(3,3), not q(3,4), not q(3,5)#4
%% @r12  q(3,2) :- not q(3,1), not q(3,3), not q(3,4), not q(3,5)#4
%% @r13  q(3,3) :- not q(3,1), not q(3,2), not q(3,4), not q(3,5)#4
%% @r14  q(3,4) :- not q(3,1), not q(3,2), not q(3,3), not q(3,5)#4
%% @r15  q(3,5) :- not q(3,1), not q(3,2), not q(3,3), not q(3,4)#4
%% @r16  q(4,1) :- not q(4,2), not q(4,3), not q(4,4), not q(4,5)#4
%% @r17  q(4,2) :- not q(4,1), not q(4,3), not q(4,4), not q(4,5)#4
%% @r18  q(4,3) :- not q(4,1), not q(4,2), not q(4,4), not q(4,5)#4
%% @r19  q(4,4) :- not q(4,1), not q(4,2), not q(4,3), not q(4,5)#4
%% @r20  q(4,5) :- not q(4,1), not q(4,2), not q(4,3), not q(4,4)#4
%% @r21  q(5,1) :- not q(5,2), not q(5,3), not q(5,4), not q(5,5)#4
%% @r22  q(5,2) :- not q(5,1), not q(5,3), not q(5,4), not q(5,5)#4
%% @r23  q(5,3) :- not q(5,1), not q(5,2), not q(5,4), not q(5,5)#4
%% @r24  q(5,4) :- not q(5,1), not q(5,2), not q(5,3), not q(5,5)#4
%% @r25  q(5,5) :- not q(5,1), not q(5,2), not q(5,3), not q(5,4)#4
%% @r26  bot :- q(1,1), q(2,1)#2
%% @r27  bot :- q(1,1), q(3,1)#2
%% @r28  bot :- q(1,1), q(4,1)#2
%% @r29  bot :- q(1,1), q(5,1)#2
%% @r30  bot :- q(2,1), q(3,1)#2
%% @r31  bot :- q(2,1), q(4,1)#2
%% @r32  bot :- q(2,1), q(5,1)#2
%% @r33  bot :- q(3,1), q(4,1)#2
%% @r34  bot :- q(3,1), q(5,1)#2
%% @r35  bot :- q(4,1), q(5,1)#2
%% @r36  bot :- q(1,2), q(2,2)#2
%% @r37  bot :- q(1,2), q(3,2)#2
%% @r38  bot :- q(1,2), q(4,2)#2
%% @r39  bot :- q(1,2), q(5,2)#2
%% @r40  bot :- q(2,2), q(3,2)#2
%% @r41  bot :- q(2,2), q(4,2)#2
%% @r42  bot :- q(2,2), q(5,2)#2
%% @r43  bot :- q(3,2), q(4,2)#2
%% @r44  bot :- q(3,2), q(5,2)#2
%% @r45  bot :- q(4,2), q(5,2)#2
%% @r46  bot :- q(1,3), q(2,3)#2
%% @r47  bot :- q(1,3), q(3,3)#2
%% @r48  bot :- q(1,3), q(4,3)#2
%% @r49  bot :- q(1,3), q(5,3)#2
%% @r50  bot :- q(2,3), q(3,3)#2
%% @r51  bot :- q(2,3), q(4,3)#2
%% @r52  bot :- q(2,3), q(5,3)#2
%% @r53  bot :- q(3,3), q(4,3)#2
%% @r54  bot :- q(3,3), q(5,3)#2
%% @r55  bot :- q(4,3), q(5,3)#2
%% @r56  bot :- q(1,4), q(2,4)#2
%% @r57  bot :- q(1,4), q(3,4)#2
%% @r58  bot :- q(1,4), q(4,4)#2
%% @r59  bot :- q(1,4), q(5,4)#2
%% @r60  bot :- q(2,4), q(3,4)#2
%% @r61  bot :- q(2,4), q(4,4)#2
%% @r62  bot :- q(2,4), q(5,4)#2
%% @r63  bot :- q(3,4), q(4,4)#2
%% @r64  bot :- q(3,4), q(5,4)#2
%% @r65  bot :- q(4,4), q(5,4)#2
%% @r66  bot :- q(1,5), q(2,5)#2
%% @r67  bot :- q(1,5), q(3,5)#2
%% @r68  bot :- q(1,5), q(4,5)#2
%% @r69  bot :- q(1,5), q(5,5)#2
%% @r70  bot :- q(2,5), q(3,5)#2
%% @r71  bot :- q(2,5), q(4,5)#2
%% @r72  bot :- q(2,5), q(5,5)#2
%% @r73  bot :- q(3,5), q(4,5)#2
%% @r74  bot :- q(3,5), q(5,5)#2
%% @r75  bot :- q(4,5), q(5,5)#2
%% @r76  bot :- q(1,1), q(2,2)#2
%% @r77  bot :- q(1,1), q(3,3)#2
%% @r78  bot :- q(1,1), q(4,4)#2
%% @r79  bot :- q(1,1), q(5,5)#2
%% @r80  bot :- q(1,2), q(2,3)#2
%% @r81  bot :- q(1,2), q(2,1)#2
%% @r82  bot :- q(1,2), q(3,4)#2
%% @r83  bot :- q(1,2), q(4,5)#2
%% @r84  bot :- q(1,3), q(2,4)#2
%% @r85  bot :- q(1,3), q(2,2)#2
%% @r86  bot :- q(1,3), q(3,5)#2
%% @r87  bot :- q(1,3), q(3,1)#2
%% @r88  bot :- q(1,4), q(2,5)#2
%% @r89  bot :- q(1,4), q(2,3)#2
%% @r90  bot :- q(1,4), q(3,2)#2
%% @r91  bot :- q(1,4), q(4,1)#2
%% @r92  bot :- q(1,5), q(2,4)#2
%% @r93  bot :- q(1,5), q(3,3)#2
%% @r94  bot :- q(1,5), q(4,2)#2
%% @r95  bot :- q(1,5), q(5,1)#2
%% @r96  bot :- q(2,1), q(3,2)#2
%% @r97  bot :- q(2,1), q(4,3)#2
%% @r98  bot :- q(2,1), q(5,4)#2
%% @r99  bot :- q(2,2), q(3,3)#2
%% @r100  bot :- q(2,2), q(3,1)#2
%% @r101  bot :- q(2,2), q(4,4)#2
%% @r102  bot :- q(2,2), q(5,5)#2
%% @r103  bot :- q(2,3), q(3,4)#2
%% @r104  bot :- q(2,3), q(3,2)#2
%% @r105  bot :- q(2,3), q(4,5)#2
%% @r106  bot :- q(2,3), q(4,1)#2
%% @r107  bot :- q(2,4), q(3,5)#2
%% @r108  bot :- q(2,4), q(3,3)#2
%% @r109  bot :- q(2,4), q(4,2)#2
%% @r110  bot :- q(2,4), q(5,1)#2
%% @r111  bot :- q(2,5), q(3,4)#2
%% @r112  bot :- q(2,5), q(4,3)#2
%% @r113  bot :- q(2,5), q(5,2)#2
%% @r114  bot :- q(3,1), q(4,2)#2
%% @r115  bot :- q(3,1), q(5,3)#2
%% @r116  bot :- q(3,2), q(4,3)#2
%% @r117  bot :- q(3,2), q(4,1)#2
%% @r118  bot :- q(3,2), q(5,4)#2
%% @r119  bot :- q(3,3), q(4,4)#2
%% @r120  bot :- q(3,3), q(4,2)#2
%% @r121  bot :- q(3,3), q(5,5)#2
%% @r122  bot :- q(3,3), q(5,1)#2
%% @r123  bot :- q(3,4), q(4,5)#2
%% @r124  bot :- q(3,4), q(4,3)#2
%% @r125  bot :- q(3,4), q(5,2)#2
%% @r126  bot :- q(3,5), q(4,4)#2
%% @r127  bot :- q(3,5), q(5,3)#2
%% @r128  bot :- q(4,1), q(5,2)#2
%% @r129  bot :- q(4,2), q(5,3)#2
%% @r130  bot :- q(4,2), q(5,1)#2
%% @r131  bot :- q(4,3), q(5,4)#2
%% @r132  bot :- q(4,3), q(5,2)#2
%% @r133  bot :- q(4,4), q(5,5)#2
%% @r134  bot :- q(4,4), q(5,3)#2
%% @r135  bot :- q(4,5), q(5,4)#2
%% Head of the rules 

fact(bot) <=> fail.
nrule(X) \ head(X,Y), heads(Y,C) <=> A is C-1 | heads(Y,A).
heads(X,0) <=> nhead(X).

%% Constraint declaration

:- chr_constraint equal/2, nequal/3, dom/2, equal/3, alldiff/1, leq3/3.

%% Constraint propagation


equal(X,Y) \ dom(X,DX), dom(Y,DY) <=> intersection(DX,DY,ND) | dom(X,ND), dom(Y,ND).
equal(X,Y), dom(X,[DX]), dom(Y,[DY]) <=> DX =\= DY | fail.


fact(nequal(X,Y,Z)) <=> nequal(X,Y,Z).
nequal(X,N,Y), dom(Y,[DY]) \ dom(X,DX) <=> A is DY-N, member(A,DX), delete(A,DX,ND) | dom(X,ND).
nequal(X,N,Y), dom(X,[DX]) \ dom(Y,DY) <=> A is DX+N, member(A,DY), delete(A,DY,ND) | dom(Y,ND).
nequal(X,N,Y), dom(X,[DX]), dom(Y,[DY]) <=> A is DX + N, A == DY | fail.

dom(A,[DA]), dom(C,[DC]), bodyC(X,nequal(A,B,C)) ==> Z is DA+B, Z =\= DC | verified_constraint(X,nequal(A,B,C)).


fact(dom(X,Y)) <=> dom(X,Y).
dom(_,[]) <=> fail.
dom(X,L1), dom(X,L2) <=> intersection(L1,L2,L3), dom(X,L3).


fact(equal(X,Y,Z)) <=> equal(X,Y,Z).
equal(X,N,Y), dom(Y,DY) \ dom(X,DX) <=> member(V,DX), A is V+N, not(member(A,DY)), delete(DX,V,ND) | dom(X,ND).
equal(X,N,Y), dom(X,DX) \ dom(Y,DY) <=> member(V,DY), A is V-N, not(member(A,DX)), delete(DY,V,ND) | dom(Y,ND).
equal(X,N,Y), dom(X,[DX]), dom(Y,[DY]) <=> A is DX + N, A =\= DY | fail.

dom(A,[DA]), dom(C,[DC]), bodyC(X,equal(A,B,C)) ==> Z is DA+B, Z == DC | verified_constraint(X,equal(A,B,C)).



:- chr_constraint verif_alldiff/2.

bodyC(_,alldiff(X)) ==> verif_alldiff(X,X).
fact(alldiff(X)) <=> alldiff(X).
alldiff([]) <=> fail.
alldiff(L) \ alldiff(L) <=> true.

alldiff(L), dom(X,[DX]), dom(Y,[DX]) <=> member(X,L), member(Y,L), X \= Y | fail. %If they have the same domain, then fail.
alldiff(L), dom(X,[DX]) \ dom(Y,DY) <=> member(X,L), member(Y,L), member(DX,DY), X \= Y | delete(DY,DX,DYY), dom(Y,DYY).


dom(X,DX) \ verif_alldiff(L1,L2) <=> member(X,L2), length(DX,L), L=:=1, delete(L2,X,L3) | verif_alldiff(L1,L3).

verif_alldiff(Y,[]), bodyC(X,alldiff(Y)) ==> verified_constraint(X,alldiff(Y)).

leqfiltering1 @ dom(X,DX), fact(leq3(X,Z,Y)) \ dom(Y,DY) <=> min_member(MX,DX), min_member(MY,DY), MY < MX + Z | delete(DY,MY,DYY), dom(Y,DYY).
leqfiltering2 @ dom(Y,DY), fact(leq3(X,Z,Y)) \ dom(X,DX) <=> max_member(MX,DX), max_member(MY,DY), MY < MX + Z | delete(DX,MX,DXX), dom(X,DXX).
leqTest @ dom(Y,[DY]), dom(X,[DX]), fact(leq3(X,Z,Y)) <=> DX + Z > DY | fail.

dom(L,DL), dom(N,DN), bodyC(X,leq3(L,M,N)) ==>  DL + M =< DN | verified_constraint(X,leq3(L,M,N)).

%% Transformation 

red_neg @ fact(X) \ bodyN(Y,X), rule(Y,_,_,_) <=> nrule(Y).
red_fai @ nhead(X) \ bodyP(Y,X), rule(Y,_,_,_) <=> nrule(Y).
red_pos @ nhead(X) \ bodyN(Y,X), rule(Y,P,N,C) <=> A is N-1 | rule(Y,P,A,C).
red_suc @ fact(X) \ bodyP(Y,X), rule(Y,P,N,C) <=> A is P-1 | rule(Y,A,N,C).

red_con @ verified_constraint(X,Y) \ bodyC(X,Y), rule(X,P,N,C) <=> A is C-1 | rule(X,P,N,A).

%% Empty body 

head(X,Y), rule(X,0,0,0) <=> fact(Y).

%% Choice

%% The rule is forced to be true.
%% The negative body cannot be true
choi_frule(X), bodyN(X,Y), fact(Y) <=> fail.
choi_frule(X) \ bodyC(X,Y) <=> fact(Y).

%% The rule is forced to be false
%% If one atom from the negative body is true, then fail.
nhead(Y) \ choi_nrule(X,Z,C), bodyN(X,Y) <=> A is Z-1 | choi_nrule(X,A,C).

choi_nrule(X,Z,C), verified_constraint(X,_) <=> A is C-1 | choi_nrule(X,Z,A).
choi_nrule(_,0,0) <=> fail.

rule(X,0,Z,C), choice(X) <=> (choi_frule(X), rule(X,0,0,0) ; choi_nrule(X,Z,C), nrule(X)).
enumeration @ dom(X,[V|Rest]) <=> length(Rest,Length), Length =\= 0 | dom(X,[V]) ; dom(X,Rest).

%% Launcher 

launcher <=> rule(1,0,4,0), head(1,q(1,1)), bodyN(1,q(1,2)), bodyN(1,q(1,3)), bodyN(1,q(1,4)), bodyN(1,q(1,5)), rule(2,0,4,0), head(2,q(1,2)), bodyN(2,q(1,1)), bodyN(2,q(1,3)), bodyN(2,q(1,4)), bodyN(2,q(1,5)), rule(3,0,4,0), head(3,q(1,3)), bodyN(3,q(1,1)), bodyN(3,q(1,2)), bodyN(3,q(1,4)), bodyN(3,q(1,5)), rule(4,0,4,0), head(4,q(1,4)), bodyN(4,q(1,1)), bodyN(4,q(1,2)), bodyN(4,q(1,3)), bodyN(4,q(1,5)), rule(5,0,4,0), head(5,q(1,5)), bodyN(5,q(1,1)), bodyN(5,q(1,2)), bodyN(5,q(1,3)), bodyN(5,q(1,4)), rule(6,0,4,0), head(6,q(2,1)), bodyN(6,q(2,2)), bodyN(6,q(2,3)), bodyN(6,q(2,4)), bodyN(6,q(2,5)), rule(7,0,4,0), head(7,q(2,2)), bodyN(7,q(2,1)), bodyN(7,q(2,3)), bodyN(7,q(2,4)), bodyN(7,q(2,5)), rule(8,0,4,0), head(8,q(2,3)), bodyN(8,q(2,1)), bodyN(8,q(2,2)), bodyN(8,q(2,4)), bodyN(8,q(2,5)), rule(9,0,4,0), head(9,q(2,4)), bodyN(9,q(2,1)), bodyN(9,q(2,2)), bodyN(9,q(2,3)), bodyN(9,q(2,5)), rule(10,0,4,0), head(10,q(2,5)), bodyN(10,q(2,1)), bodyN(10,q(2,2)), bodyN(10,q(2,3)), bodyN(10,q(2,4)), rule(11,0,4,0), head(11,q(3,1)), bodyN(11,q(3,2)), bodyN(11,q(3,3)), bodyN(11,q(3,4)), bodyN(11,q(3,5)), rule(12,0,4,0), head(12,q(3,2)), bodyN(12,q(3,1)), bodyN(12,q(3,3)), bodyN(12,q(3,4)), bodyN(12,q(3,5)), rule(13,0,4,0), head(13,q(3,3)), bodyN(13,q(3,1)), bodyN(13,q(3,2)), bodyN(13,q(3,4)), bodyN(13,q(3,5)), rule(14,0,4,0), head(14,q(3,4)), bodyN(14,q(3,1)), bodyN(14,q(3,2)), bodyN(14,q(3,3)), bodyN(14,q(3,5)), rule(15,0,4,0), head(15,q(3,5)), bodyN(15,q(3,1)), bodyN(15,q(3,2)), bodyN(15,q(3,3)), bodyN(15,q(3,4)), rule(16,0,4,0), head(16,q(4,1)), bodyN(16,q(4,2)), bodyN(16,q(4,3)), bodyN(16,q(4,4)), bodyN(16,q(4,5)), rule(17,0,4,0), head(17,q(4,2)), bodyN(17,q(4,1)), bodyN(17,q(4,3)), bodyN(17,q(4,4)), bodyN(17,q(4,5)), rule(18,0,4,0), head(18,q(4,3)), bodyN(18,q(4,1)), bodyN(18,q(4,2)), bodyN(18,q(4,4)), bodyN(18,q(4,5)), rule(19,0,4,0), head(19,q(4,4)), bodyN(19,q(4,1)), bodyN(19,q(4,2)), bodyN(19,q(4,3)), bodyN(19,q(4,5)), rule(20,0,4,0), head(20,q(4,5)), bodyN(20,q(4,1)), bodyN(20,q(4,2)), bodyN(20,q(4,3)), bodyN(20,q(4,4)), rule(21,0,4,0), head(21,q(5,1)), bodyN(21,q(5,2)), bodyN(21,q(5,3)), bodyN(21,q(5,4)), bodyN(21,q(5,5)), rule(22,0,4,0), head(22,q(5,2)), bodyN(22,q(5,1)), bodyN(22,q(5,3)), bodyN(22,q(5,4)), bodyN(22,q(5,5)), rule(23,0,4,0), head(23,q(5,3)), bodyN(23,q(5,1)), bodyN(23,q(5,2)), bodyN(23,q(5,4)), bodyN(23,q(5,5)), rule(24,0,4,0), head(24,q(5,4)), bodyN(24,q(5,1)), bodyN(24,q(5,2)), bodyN(24,q(5,3)), bodyN(24,q(5,5)), rule(25,0,4,0), head(25,q(5,5)), bodyN(25,q(5,1)), bodyN(25,q(5,2)), bodyN(25,q(5,3)), bodyN(25,q(5,4)), rule(26,2,0,0), head(26,bot), bodyP(26,q(1,1)), bodyP(26,q(2,1)), rule(27,2,0,0), head(27,bot), bodyP(27,q(1,1)), bodyP(27,q(3,1)), rule(28,2,0,0), head(28,bot), bodyP(28,q(1,1)), bodyP(28,q(4,1)), rule(29,2,0,0), head(29,bot), bodyP(29,q(1,1)), bodyP(29,q(5,1)), rule(30,2,0,0), head(30,bot), bodyP(30,q(2,1)), bodyP(30,q(3,1)), rule(31,2,0,0), head(31,bot), bodyP(31,q(2,1)), bodyP(31,q(4,1)), rule(32,2,0,0), head(32,bot), bodyP(32,q(2,1)), bodyP(32,q(5,1)), rule(33,2,0,0), head(33,bot), bodyP(33,q(3,1)), bodyP(33,q(4,1)), rule(34,2,0,0), head(34,bot), bodyP(34,q(3,1)), bodyP(34,q(5,1)), rule(35,2,0,0), head(35,bot), bodyP(35,q(4,1)), bodyP(35,q(5,1)), rule(36,2,0,0), head(36,bot), bodyP(36,q(1,2)), bodyP(36,q(2,2)), rule(37,2,0,0), head(37,bot), bodyP(37,q(1,2)), bodyP(37,q(3,2)), rule(38,2,0,0), head(38,bot), bodyP(38,q(1,2)), bodyP(38,q(4,2)), rule(39,2,0,0), head(39,bot), bodyP(39,q(1,2)), bodyP(39,q(5,2)), rule(40,2,0,0), head(40,bot), bodyP(40,q(2,2)), bodyP(40,q(3,2)), rule(41,2,0,0), head(41,bot), bodyP(41,q(2,2)), bodyP(41,q(4,2)), rule(42,2,0,0), head(42,bot), bodyP(42,q(2,2)), bodyP(42,q(5,2)), rule(43,2,0,0), head(43,bot), bodyP(43,q(3,2)), bodyP(43,q(4,2)), rule(44,2,0,0), head(44,bot), bodyP(44,q(3,2)), bodyP(44,q(5,2)), rule(45,2,0,0), head(45,bot), bodyP(45,q(4,2)), bodyP(45,q(5,2)), rule(46,2,0,0), head(46,bot), bodyP(46,q(1,3)), bodyP(46,q(2,3)), rule(47,2,0,0), head(47,bot), bodyP(47,q(1,3)), bodyP(47,q(3,3)), rule(48,2,0,0), head(48,bot), bodyP(48,q(1,3)), bodyP(48,q(4,3)), rule(49,2,0,0), head(49,bot), bodyP(49,q(1,3)), bodyP(49,q(5,3)), rule(50,2,0,0), head(50,bot), bodyP(50,q(2,3)), bodyP(50,q(3,3)), rule(51,2,0,0), head(51,bot), bodyP(51,q(2,3)), bodyP(51,q(4,3)), rule(52,2,0,0), head(52,bot), bodyP(52,q(2,3)), bodyP(52,q(5,3)), rule(53,2,0,0), head(53,bot), bodyP(53,q(3,3)), bodyP(53,q(4,3)), rule(54,2,0,0), head(54,bot), bodyP(54,q(3,3)), bodyP(54,q(5,3)), rule(55,2,0,0), head(55,bot), bodyP(55,q(4,3)), bodyP(55,q(5,3)), rule(56,2,0,0), head(56,bot), bodyP(56,q(1,4)), bodyP(56,q(2,4)), rule(57,2,0,0), head(57,bot), bodyP(57,q(1,4)), bodyP(57,q(3,4)), rule(58,2,0,0), head(58,bot), bodyP(58,q(1,4)), bodyP(58,q(4,4)), rule(59,2,0,0), head(59,bot), bodyP(59,q(1,4)), bodyP(59,q(5,4)), rule(60,2,0,0), head(60,bot), bodyP(60,q(2,4)), bodyP(60,q(3,4)), rule(61,2,0,0), head(61,bot), bodyP(61,q(2,4)), bodyP(61,q(4,4)), rule(62,2,0,0), head(62,bot), bodyP(62,q(2,4)), bodyP(62,q(5,4)), rule(63,2,0,0), head(63,bot), bodyP(63,q(3,4)), bodyP(63,q(4,4)), rule(64,2,0,0), head(64,bot), bodyP(64,q(3,4)), bodyP(64,q(5,4)), rule(65,2,0,0), head(65,bot), bodyP(65,q(4,4)), bodyP(65,q(5,4)), rule(66,2,0,0), head(66,bot), bodyP(66,q(1,5)), bodyP(66,q(2,5)), rule(67,2,0,0), head(67,bot), bodyP(67,q(1,5)), bodyP(67,q(3,5)), rule(68,2,0,0), head(68,bot), bodyP(68,q(1,5)), bodyP(68,q(4,5)), rule(69,2,0,0), head(69,bot), bodyP(69,q(1,5)), bodyP(69,q(5,5)), rule(70,2,0,0), head(70,bot), bodyP(70,q(2,5)), bodyP(70,q(3,5)), rule(71,2,0,0), head(71,bot), bodyP(71,q(2,5)), bodyP(71,q(4,5)), rule(72,2,0,0), head(72,bot), bodyP(72,q(2,5)), bodyP(72,q(5,5)), rule(73,2,0,0), head(73,bot), bodyP(73,q(3,5)), bodyP(73,q(4,5)), rule(74,2,0,0), head(74,bot), bodyP(74,q(3,5)), bodyP(74,q(5,5)), rule(75,2,0,0), head(75,bot), bodyP(75,q(4,5)), bodyP(75,q(5,5)), rule(76,2,0,0), head(76,bot), bodyP(76,q(1,1)), bodyP(76,q(2,2)), rule(77,2,0,0), head(77,bot), bodyP(77,q(1,1)), bodyP(77,q(3,3)), rule(78,2,0,0), head(78,bot), bodyP(78,q(1,1)), bodyP(78,q(4,4)), rule(79,2,0,0), head(79,bot), bodyP(79,q(1,1)), bodyP(79,q(5,5)), rule(80,2,0,0), head(80,bot), bodyP(80,q(1,2)), bodyP(80,q(2,3)), rule(81,2,0,0), head(81,bot), bodyP(81,q(1,2)), bodyP(81,q(2,1)), rule(82,2,0,0), head(82,bot), bodyP(82,q(1,2)), bodyP(82,q(3,4)), rule(83,2,0,0), head(83,bot), bodyP(83,q(1,2)), bodyP(83,q(4,5)), rule(84,2,0,0), head(84,bot), bodyP(84,q(1,3)), bodyP(84,q(2,4)), rule(85,2,0,0), head(85,bot), bodyP(85,q(1,3)), bodyP(85,q(2,2)), rule(86,2,0,0), head(86,bot), bodyP(86,q(1,3)), bodyP(86,q(3,5)), rule(87,2,0,0), head(87,bot), bodyP(87,q(1,3)), bodyP(87,q(3,1)), rule(88,2,0,0), head(88,bot), bodyP(88,q(1,4)), bodyP(88,q(2,5)), rule(89,2,0,0), head(89,bot), bodyP(89,q(1,4)), bodyP(89,q(2,3)), rule(90,2,0,0), head(90,bot), bodyP(90,q(1,4)), bodyP(90,q(3,2)), rule(91,2,0,0), head(91,bot), bodyP(91,q(1,4)), bodyP(91,q(4,1)), rule(92,2,0,0), head(92,bot), bodyP(92,q(1,5)), bodyP(92,q(2,4)), rule(93,2,0,0), head(93,bot), bodyP(93,q(1,5)), bodyP(93,q(3,3)), rule(94,2,0,0), head(94,bot), bodyP(94,q(1,5)), bodyP(94,q(4,2)), rule(95,2,0,0), head(95,bot), bodyP(95,q(1,5)), bodyP(95,q(5,1)), rule(96,2,0,0), head(96,bot), bodyP(96,q(2,1)), bodyP(96,q(3,2)), rule(97,2,0,0), head(97,bot), bodyP(97,q(2,1)), bodyP(97,q(4,3)), rule(98,2,0,0), head(98,bot), bodyP(98,q(2,1)), bodyP(98,q(5,4)), rule(99,2,0,0), head(99,bot), bodyP(99,q(2,2)), bodyP(99,q(3,3)), rule(100,2,0,0), head(100,bot), bodyP(100,q(2,2)), bodyP(100,q(3,1)), rule(101,2,0,0), head(101,bot), bodyP(101,q(2,2)), bodyP(101,q(4,4)), rule(102,2,0,0), head(102,bot), bodyP(102,q(2,2)), bodyP(102,q(5,5)), rule(103,2,0,0), head(103,bot), bodyP(103,q(2,3)), bodyP(103,q(3,4)), rule(104,2,0,0), head(104,bot), bodyP(104,q(2,3)), bodyP(104,q(3,2)), rule(105,2,0,0), head(105,bot), bodyP(105,q(2,3)), bodyP(105,q(4,5)), rule(106,2,0,0), head(106,bot), bodyP(106,q(2,3)), bodyP(106,q(4,1)), rule(107,2,0,0), head(107,bot), bodyP(107,q(2,4)), bodyP(107,q(3,5)), rule(108,2,0,0), head(108,bot), bodyP(108,q(2,4)), bodyP(108,q(3,3)), rule(109,2,0,0), head(109,bot), bodyP(109,q(2,4)), bodyP(109,q(4,2)), rule(110,2,0,0), head(110,bot), bodyP(110,q(2,4)), bodyP(110,q(5,1)), rule(111,2,0,0), head(111,bot), bodyP(111,q(2,5)), bodyP(111,q(3,4)), rule(112,2,0,0), head(112,bot), bodyP(112,q(2,5)), bodyP(112,q(4,3)), rule(113,2,0,0), head(113,bot), bodyP(113,q(2,5)), bodyP(113,q(5,2)), rule(114,2,0,0), head(114,bot), bodyP(114,q(3,1)), bodyP(114,q(4,2)), rule(115,2,0,0), head(115,bot), bodyP(115,q(3,1)), bodyP(115,q(5,3)), rule(116,2,0,0), head(116,bot), bodyP(116,q(3,2)), bodyP(116,q(4,3)), rule(117,2,0,0), head(117,bot), bodyP(117,q(3,2)), bodyP(117,q(4,1)), rule(118,2,0,0), head(118,bot), bodyP(118,q(3,2)), bodyP(118,q(5,4)), rule(119,2,0,0), head(119,bot), bodyP(119,q(3,3)), bodyP(119,q(4,4)), rule(120,2,0,0), head(120,bot), bodyP(120,q(3,3)), bodyP(120,q(4,2)), rule(121,2,0,0), head(121,bot), bodyP(121,q(3,3)), bodyP(121,q(5,5)), rule(122,2,0,0), head(122,bot), bodyP(122,q(3,3)), bodyP(122,q(5,1)), rule(123,2,0,0), head(123,bot), bodyP(123,q(3,4)), bodyP(123,q(4,5)), rule(124,2,0,0), head(124,bot), bodyP(124,q(3,4)), bodyP(124,q(4,3)), rule(125,2,0,0), head(125,bot), bodyP(125,q(3,4)), bodyP(125,q(5,2)), rule(126,2,0,0), head(126,bot), bodyP(126,q(3,5)), bodyP(126,q(4,4)), rule(127,2,0,0), head(127,bot), bodyP(127,q(3,5)), bodyP(127,q(5,3)), rule(128,2,0,0), head(128,bot), bodyP(128,q(4,1)), bodyP(128,q(5,2)), rule(129,2,0,0), head(129,bot), bodyP(129,q(4,2)), bodyP(129,q(5,3)), rule(130,2,0,0), head(130,bot), bodyP(130,q(4,2)), bodyP(130,q(5,1)), rule(131,2,0,0), head(131,bot), bodyP(131,q(4,3)), bodyP(131,q(5,4)), rule(132,2,0,0), head(132,bot), bodyP(132,q(4,3)), bodyP(132,q(5,2)), rule(133,2,0,0), head(133,bot), bodyP(133,q(4,4)), bodyP(133,q(5,5)), rule(134,2,0,0), head(134,bot), bodyP(134,q(4,4)), bodyP(134,q(5,3)), rule(135,2,0,0), head(135,bot), bodyP(135,q(4,5)), bodyP(135,q(5,4)), heads(q(1,2),1), heads(q(1,3),1), heads(q(1,4),1), heads(q(1,5),1), heads(q(1,1),1), heads(q(2,2),1), heads(q(2,3),1), heads(q(2,4),1), heads(q(2,5),1), heads(q(2,1),1), heads(q(3,2),1), heads(q(3,3),1), heads(q(3,4),1), heads(q(3,5),1), heads(q(3,1),1), heads(q(4,2),1), heads(q(4,3),1), heads(q(4,4),1), heads(q(4,5),1), heads(q(4,1),1), heads(q(5,2),1), heads(q(5,3),1), heads(q(5,4),1), heads(q(5,5),1), heads(q(5,1),1), heads(bot,110), choice(1), choice(2), choice(3), choice(4), choice(5), choice(6), choice(7), choice(8), choice(9), choice(10), choice(11), choice(12), choice(13), choice(14), choice(15), choice(16), choice(17), choice(18), choice(19), choice(20), choice(21), choice(22), choice(23), choice(24), choice(25), cleaner, end.
%% Cleaner 

fact(X) \ fact(X) <=> true.
cleaner \ bodyP(_,_) <=> true.
cleaner \ bodyN(_,_) <=> true.
cleaner \ head(_,_) <=> true.
cleaner \ bodyC(_,_) <=> true.
cleaner \ choice(_) <=> true.
cleaner \ choi_frule(_) <=> true.
cleaner \ choi_nrule(_,_,_) <=> true.
cleaner \ nhead(_) <=> true.
cleaner \ nrule(_) <=> true.
cleaner \ rule(_,_,_,_) <=> true.
cleaner \ heads(_,_) <=> true.
cleaner <=> true.

end <=> chr_show_store(user), nl.
