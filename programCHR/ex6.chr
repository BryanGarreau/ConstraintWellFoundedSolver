:- use_module(library(chr)).
[scc].
:- chr_constraint fact/1, rule/4, nrule/1, nhead/1, head/2, heads/2, bodyP/2, bodyN/2, bodyC/2, launcher/0, end/0, cleaner/0, choice/1, choi_nrule/3, choi_frule/1, verified_constraint/2, unsat_constraint/2, bot/0.

%%Program

%% @r1  a :- not b, not c#2
%% @r2  b :- not a, not c#2
%% @r3  c :- not a, not b#2
%% Facts of the program : 
%% 

%% Head of the rules 

fact(bot) <=> fail.
nrule(X) \ head(X,Y), heads(Y,C) <=> A is C-1 | heads(Y,A).
heads(bot,_) <=> true.
heads(X,0) <=> nhead(X).
nhead(bot) <=> true.

%%Computing unfounded sets of the program based on the SCCs.

:- chr_constraint scc_component/1, support/2, external_support/2, nb_support_scc/2, nb_support_scc_init/2, supported/1, unfounded/1.

init_sccs(Node,Arcs) :- nodes_arcs_sccs(Node, Arcs, Ss), assert_sccs(Ss).
assert_sccs([]).
assert_sccs([Comp|Rest]) :- scc_component(Comp), assert_sccs(Rest).

head(X,B), scc_component(SCC) ==> memberchk(B,SCC) | support(X,SCC). %% Compute the support for each SCC.
bodyP(X,B) \ support(X,SCC) <=> memberchk(B,SCC) | true. %% Deletes all non external support. (to detect loops)

scc_component(SCC) ==> nb_support_scc_init(SCC,0).

support(X,SCC), nb_support_scc_init(SCC,N) <=> NewN is N+1 | external_support(X,SCC), nb_support_scc_init(SCC,NewN).

supported(SCC) \ external_support(_,SCC) <=> true.
fact(F) \ nb_support_scc(SCC,_) <=> memberchk(F,SCC) | supported(SCC).

nrule(X) \ external_support(X,SCC), nb_support_scc(SCC,N) <=> NewN is N-1 | nb_support_scc(SCC,NewN). %% Remove deleted supports.

nb_support_scc_init(A,B) <=> nb_support_scc(A,B). %% All the supports have been computed.
nb_support_scc(SCC,0) <=> unfounded(SCC). %% If a SCC has no support, then it's unfounded.
%% Constraint declaration

:- chr_constraint greater/2, dom/2, equal/2, leq/3, nequal/2.

%% Constraint propagation


dom(X,DX), fact(greater(X,Y)) \ dom(Y,DY) <=> max_member(MX,DX), max_member(MY,DY), MX < MY, delete(DY,MY,DYY) | dom(Y,DYY).
fact(greater(X,Y)) \ dom(X,DX) <=> length(DX,L), L =\= 1, integer(Y), min_member(MX,DX), DX < Y, delete(DX,MX,DXX) | dom(X,DXX).
fact(greater(X,Y)) \ dom(Y,DY) <=> length(DY,L), L =\= 1, integer(X), max_member(MY,DY), X < MY, delete(DY,MY,DYY) | dom(Y,DYY).

dom(Y,[DY]), dom(X,[DX]), fact(greater(X,Y)) <=> DX =< DY | fail.
dom(X,[DX]), fact(greater(X,Y)) <=> integer(Y), DX =< Y | fail.
dom(Y,[DY]), fact(greater(X,Y)) <=> integer(X), X =< DY | fail.

dom(X,[DX]), dom(Y,[DY]), bodyC(R,greater(X,Y)) ==>  DX > DY | verified_constraint(R,greater(X,Y)).
dom(X,[DX]), dom(Y,[DY]), bodyC(R,greater(X,Y)) ==>  DX =< DY | unsat_constraint(R,greater(X,Y)).

dom(Y,[DY]), bodyC(R,greater(X,Y)) ==> integer(X), X > DY | verified_constraint(R,greater(X,Y)).
dom(Y,[DY]), bodyC(R,greater(X,Y)) ==> integer(X), X =< DY | unsat_constraint(R,greater(X,Y)).

dom(X,[DX]), bodyC(R,greater(X,Y)) ==> integer(Y), DX > Y | verified_constraint(R,greater(X,Y)).
dom(X,[DX]), bodyC(R,greater(X,Y)) ==> integer(Y), DX =< Y | unsat_constraint(R,greater(X,Y)).

fact(dom(X,Y)) <=> dom(X,Y).
dom(_,[]) <=> fail.
dom(X,L1), dom(X,L2) <=> intersection(L1,L2,L3), dom(X,L3).


fact(equal(X,Y)) \ dom(X,DX) <=> integer(Y), member(Y,DX), length(DX,L), L =\= 1 | dom(X,[Y]).

fact(equal(X,Y)) \ dom(X,DX), dom(Y,DY) <=> intersection(DX,DY,ND), length(DX,LX), LX =\= 1, length(DY,LY), LY =\= 1 | dom(X,ND), dom(Y,ND).
fact(equal(X,Y)), dom(X,[DX]), dom(Y,[DY]) <=> DX =\= DY | fail.
fact(equal(X,Y)) \ dom(X,[DX]) <=> integer(Y), Y =\= DX | fail.
fact(equal(X,Y)) \ dom(Y,[DY]) <=> integer(X), DY =\= X | fail.

dom(X,[DX]), dom(Y,[DY]), bodyC(R,equal(X,Y)) ==>  DX =:= DY | verified_constraint(R,equal(X,Y)).
dom(X,[DX]), dom(Y,[DY]), bodyC(R,equal(X,Y)) ==>  DX =\= DY | unsat_constraint(R,equal(X,Y)).

dom(X,[DX]), bodyC(R,equal(X,Y)) ==> integer(Y), DX =:= Y | verified_constraint(R,equal(X,Y)).
dom(X,[DX]), bodyC(R,equal(X,Y)) ==> integer(Y), DX =\= Y | unsat_constraint(R,equal(X,Y)).

dom(Y,[DY]), bodyC(R,equal(X,Y)) ==> integer(X), DY =:= Y | verified_constraint(R,equal(X,Y)).
dom(Y,[DY]), bodyC(R,equal(X,Y)) ==> integer(X), DY =\= Y | unsat_constraint(R,equal(X,Y)).


dom(Y,DY), fact(leq(X,Y,Z)) \ dom(X,DX) <=> integer(Z), max_member(MX,DX), min_member(MY,DY), MX + MY > Z, delete(DX,MX,DXX) | dom(X,DXX).
dom(X,DX), fact(leq(X,Y,Z)) \ dom(Y,DY) <=> integer(Z), min_member(MX,DX), max_member(MY,DY), MX + MY > Z, delete(DY,MY,DYY) | dom(Y,DYY).

leqTest @ dom(Y,[DY]), dom(X,[DX]), fact(leq(X,Y,Z)) <=> integer(Z), DX + DY > Z | fail.

dom(L,DL), dom(M,DM), bodyC(X,leq(L,M,N)) ==>  DL + DM =< N | verified_constraint(X,leq(L,M,N)).
dom(L,DL), dom(M,DM), bodyC(X,leq(L,M,N)) ==>  DL + DM > N | unsat_constraint(X,leq(L,M,N)).


fact(nequal(X,Y)), dom(X,[DX]) \ dom(Y,DY) <=> member(DX,DY), delete(DY,DX,DYY) | dom(Y,DYY).
fact(nequal(X,Y)), dom(Y,[DY]) \ dom(X,DX) <=> member(DY,DX), delete(DX,DY,DXX) | dom(X,DXX).
fact(nequal(X,Y)), dom(X,[DX]), dom(Y,[DY]) <=> DX =:= DY | fail.

dom(X,[DX]), dom(Y,[DY]), bodyC(R,nequal(X,Y)) ==>  DX =\= DY | verified_constraint(R,nequal(X,Y)).
dom(X,[DX]), dom(Y,[DY]), bodyC(R,nequal(X,Y)) ==>  DX =:= DY | unsat_constraint(R,nequal(X,Y)).

%% Transformation 

red_neg @ fact(X) \ bodyN(Y,X), rule(Y,_,_,_) <=> nrule(Y).
red_fai @ nhead(X) \ bodyP(Y,X), rule(Y,_,_,_) <=> nrule(Y).
red_pos @ nhead(X) \ bodyN(Y,X), rule(Y,P,N,C) <=> A is N-1 | rule(Y,P,A,C).
red_suc @ fact(X) \ bodyP(Y,X), rule(Y,P,N,C) <=> A is P-1 | rule(Y,A,N,C).

red_con_success @ verified_constraint(X,Y) \ bodyC(X,Y), rule(X,P,N,C) <=> A is C-1 | rule(X,P,N,A).
red_con_failure @ unsat_constraint(X,Y) \ bodyC(X,Y), rule(X,_,_,_) <=> nrule(X).

%% Empty body 

head(X,Y), rule(X,0,0,0) <=> fact(Y).

%% Choice

%% The rule is forced to be true.
%% The negative body cannot be true
choi_frule(X), bodyN(X,Y), fact(Y) <=> fail.
choi_frule(X) \ bodyC(X,Y) <=> fact(Y).

%% The rule is forced to be false
%% If one atom from the negative body is true, then fail.
nhead(Y) \ choi_nrule(X,Z,C), bodyN(X,Y) <=> A is Z-1 | choi_nrule(X,A,C).

choi_nrule(X,Z,C), verified_constraint(X,_) <=> A is C-1 | choi_nrule(X,Z,A).
choi_nrule(_,0,0) <=> fail.

rule(X,0,Z,C), choice(X) <=> (choi_frule(X), rule(X,0,0,0) ; choi_nrule(X,Z,C), nrule(X)).
enumeration @ dom(X,[V|Rest]) <=> length(Rest,Length), Length =\= 0 | dom(X,[V]) ; dom(X,Rest).

launcher <=> head(1,a), head(2,b), head(3,c), heads(b,1), heads(c,1), heads(a,1), init_sccs([b,c,a],[]), bodyN(1,b), bodyN(1,c), bodyN(2,a), bodyN(2,c), bodyN(3,a), bodyN(3,b), rule(1,0,2,0), rule(2,0,2,0), rule(3,0,2,0), choice(1), choice(2), choice(3), cleaner, end.
%% Cleaner 

fact(X) \ fact(X) <=> true.
cleaner \ bodyP(_,_) <=> true.
cleaner \ bodyN(_,_) <=> true.
cleaner \ head(_,_) <=> true.
cleaner \ bodyC(_,_) <=> true.
cleaner \ choice(_) <=> true.
cleaner \ choi_frule(_) <=> true.
cleaner \ choi_nrule(_,_,_) <=> true.
cleaner \ nrule(_) <=> true.
cleaner \ rule(_,_,_,_) <=> true.
cleaner \ heads(_,_) <=> true.

cleaner \ nhead(_) <=> true.
cleaner \ unfounded(_) <=> true.
cleaner \ scc_component(_) <=> true.
cleaner \ supported(_) <=> true.
cleaner \ nb_support_scc(_,_) <=> true.
cleaner \ external_support(_,_) <=> true.
cleaner <=> true.

end <=> chr_show_store(user), write("."), nl, fail.
