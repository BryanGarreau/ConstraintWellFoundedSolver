:- use_module(library(chr)).
:- chr_constraint fact/1, rule/4, nrule/1, nhead/1, head/2, heads/2, bodyP/2, bodyN/2, bodyC/2, launcher/0, end/0, cleaner/0, choice/1, choi_nrule/3, choi_frule/1, verified_constraint/2, bot/0.

%%Program

%% @r1  q(1,1) :- not q(1,2), not q(1,3), not q(1,4)#3
%% @r2  q(1,2) :- not q(1,1), not q(1,3), not q(1,4)#3
%% @r3  q(1,3) :- not q(1,2), not q(1,1), not q(1,4)#3
%% @r4  q(1,4) :- not q(1,2), not q(1,3), not q(1,1)#3
%% @r5  q(2,1) :- not q(2,2), not q(2,3), not q(2,4)#3
%% @r6  q(2,2) :- not q(2,1), not q(2,3), not q(2,4)#3
%% @r7  q(2,3) :- not q(2,2), not q(2,1), not q(2,4)#3
%% @r8  q(2,4) :- not q(2,2), not q(2,3), not q(2,1)#3
%% @r9  q(3,1) :- not q(3,2), not q(3,3), not q(3,4)#3
%% @r10  q(3,2) :- not q(3,1), not q(3,3), not q(3,4)#3
%% @r11  q(3,3) :- not q(3,2), not q(3,1), not q(3,4)#3
%% @r12  q(3,4) :- not q(3,2), not q(3,3), not q(3,1)#3
%% @r13  q(4,1) :- not q(4,2), not q(4,3), not q(4,4)#3
%% @r14  q(4,2) :- not q(4,1), not q(4,3), not q(4,4)#3
%% @r15  q(4,3) :- not q(4,2), not q(4,1), not q(4,4)#3
%% @r16  q(4,4) :- not q(4,2), not q(4,3), not q(4,1)#3
%% @r17  bot :- q(1,1), q(2,1)#2
%% @r18  bot :- q(1,1), q(3,1)#2
%% @r19  bot :- q(1,1), q(4,1)#2
%% @r20  bot :- q(2,1), q(3,1)#2
%% @r21  bot :- q(2,1), q(4,1)#2
%% @r22  bot :- q(3,1), q(4,1)#2
%% @r23  bot :- q(1,2), q(2,2)#2
%% @r24  bot :- q(1,2), q(3,2)#2
%% @r25  bot :- q(1,2), q(4,2)#2
%% @r26  bot :- q(2,2), q(3,2)#2
%% @r27  bot :- q(2,2), q(4,2)#2
%% @r28  bot :- q(3,2), q(4,2)#2
%% @r29  bot :- q(1,3), q(2,3)#2
%% @r30  bot :- q(1,3), q(3,3)#2
%% @r31  bot :- q(1,3), q(4,3)#2
%% @r32  bot :- q(2,3), q(3,3)#2
%% @r33  bot :- q(2,3), q(4,3)#2
%% @r34  bot :- q(3,3), q(4,3)#2
%% @r35  bot :- q(1,4), q(2,4)#2
%% @r36  bot :- q(1,4), q(3,4)#2
%% @r37  bot :- q(1,4), q(4,4)#2
%% @r38  bot :- q(2,4), q(3,4)#2
%% @r39  bot :- q(2,4), q(4,4)#2
%% @r40  bot :- q(3,4), q(4,4)#2
%% @r41  bot :- q(1,1), q(2,2)#2
%% @r42  bot :- q(1,1), q(3,3)#2
%% @r43  bot :- q(1,1), q(4,4)#2
%% @r44  bot :- q(1,2), q(2,3)#2
%% @r45  bot :- q(1,2), q(3,4)#2
%% @r46  bot :- q(1,2), q(2,1)#2
%% @r47  bot :- q(1,3), q(2,4)#2
%% @r48  bot :- q(1,3), q(2,2)#2
%% @r49  bot :- q(1,3), q(3,1)#2
%% @r50  bot :- q(1,4), q(2,3)#2
%% @r51  bot :- q(1,4), q(3,2)#2
%% @r52  bot :- q(1,4), q(4,1)#2
%% @r53  bot :- q(2,1), q(3,2)#2
%% @r54  bot :- q(2,2), q(3,1)#2
%% @r55  bot :- q(2,2), q(3,3)#2
%% @r56  bot :- q(2,3), q(3,2)#2
%% @r57  bot :- q(2,3), q(3,4)#2
%% @r58  bot :- q(2,4), q(3,3)#2
%% @r59  bot :- q(4,1), q(2,3)#2
%% @r60  bot :- q(4,1), q(3,2)#2
%% @r61  bot :- q(4,1), q(1,4)#2
%% @r62  bot :- q(4,2), q(3,3)#2
%% @r63  bot :- q(4,2), q(2,4)#2
%% @r64  bot :- q(4,2), q(3,1)#2
%% @r65  bot :- q(4,3), q(3,4)#2
%% @r66  bot :- q(4,3), q(3,2)#2
%% @r67  bot :- q(4,3), q(2,1)#2
%% @r68  bot :- q(4,4), q(2,2)#2
%% @r69  bot :- q(4,4), q(3,3)#2
%% @r70  bot :- q(4,4), q(1,1)#2
%% Head of the rules 

fact(bot) <=> fail.
nrule(X) \ head(X,Y), heads(Y,C) <=> A is C-1 | heads(Y,A).
heads(X,0) <=> nhead(X).

%% Constraint declaration

:- chr_constraint dom/2, alldiff/1, leq3/3.

%% Constraint propagation

fact(dom(X,Y)) <=> dom(X,Y).
dom(_,[]) <=> fail.
dom(X,L1), dom(X,L2) <=> intersection(L1,L2,L3), dom(X,L3).

alldiff([]) <=> fail.
alldiff(L) \ alldiff(L) <=> true.

alldiff(L), dom(X,[DX]), dom(Y,[DX]) <=> member(X,L), member(Y,L), X \= Y | fail. %If they have the same domain, then fail.
alldiff(L), dom(X,[DX]) \ dom(Y,DY) <=> member(X,L), member(Y,L), member(DX,DY), X \= Y | delete(DY,DX,DYY), dom(Y,DYY).

leqfiltering1 @ dom(X,DX), fact(leq3(X,Z,Y)) \ dom(Y,DY) <=> min_member(MX,DX), min_member(MY,DY), MY < MX + Z | delete(DY,MY,DYY), dom(Y,DYY).
leqfiltering2 @ dom(Y,DY), fact(leq3(X,Z,Y)) \ dom(X,DX) <=> max_member(MX,DX), max_member(MY,DY), MY < MX + Z | delete(DX,MX,DXX), dom(X,DXX).
leqTest @ dom(Y,[DY]), dom(X,[DX]), fact(leq3(X,Z,Y)) <=> DX + Z > DY | fail.
dom(L,DL), dom(N,DN) \ bodyC(X,leq3(L,M,N)) <=>  DL + M =< DN | verified_constraint(X,leq3(L,M,N)).

%% Transformation 

red_neg @ fact(X) \ bodyN(Y,X), rule(Y,_,_,_) <=> nrule(Y).
red_fai @ nhead(X) \ bodyP(Y,X), rule(Y,_,_,_) <=> nrule(Y).
red_pos @ nhead(X) \ bodyN(Y,X), rule(Y,P,N,C) <=> A is N-1 | rule(Y,P,A,C).
red_suc @ fact(X) \ bodyP(Y,X), rule(Y,P,N,C) <=> A is P-1 | rule(Y,A,N,C).

%% Empty body 

head(X,Y), rule(X,0,0,0) <=> fact(Y).

%% Choice

%% The rule is forced to be true.
%% The negative body cannot be true
choi_frule(X), bodyN(X,Y), fact(Y) <=> fail.
choi_frule(X) \ bodyC(X,Y) <=> fact(Y).

%% The rule is forced to be false
%% If one atom from the negative body is true, then fail.
nhead(Y) \ choi_nrule(X,Z,C), bodyN(X,Y) <=> A is Z-1 | choi_nrule(X,A,C).

choi_nrule(X,Z,C), verified_constraint(X,_) <=> A is C-1 | choi_nrule(X,Z,A).
choi_nrule(_,0,0) <=> fail.

rule(X,0,Z,C), choice(X) <=> (choi_frule(X), rule(X,0,0,0) ; choi_nrule(X,Z,C), nrule(X)).
enumeration @ dom(X,[V|Rest]) <=> length(Rest,Length), Length =\= 0 | dom(X,[V]) ; dom(X,Rest).

%% Launcher 

launcher <=> rule(1,0,3,0), head(1,q(1,1)), bodyN(1,q(1,2)), bodyN(1,q(1,3)), bodyN(1,q(1,4)), rule(2,0,3,0), head(2,q(1,2)), bodyN(2,q(1,1)), bodyN(2,q(1,3)), bodyN(2,q(1,4)), rule(3,0,3,0), head(3,q(1,3)), bodyN(3,q(1,2)), bodyN(3,q(1,1)), bodyN(3,q(1,4)), rule(4,0,3,0), head(4,q(1,4)), bodyN(4,q(1,2)), bodyN(4,q(1,3)), bodyN(4,q(1,1)), rule(5,0,3,0), head(5,q(2,1)), bodyN(5,q(2,2)), bodyN(5,q(2,3)), bodyN(5,q(2,4)), rule(6,0,3,0), head(6,q(2,2)), bodyN(6,q(2,1)), bodyN(6,q(2,3)), bodyN(6,q(2,4)), rule(7,0,3,0), head(7,q(2,3)), bodyN(7,q(2,2)), bodyN(7,q(2,1)), bodyN(7,q(2,4)), rule(8,0,3,0), head(8,q(2,4)), bodyN(8,q(2,2)), bodyN(8,q(2,3)), bodyN(8,q(2,1)), rule(9,0,3,0), head(9,q(3,1)), bodyN(9,q(3,2)), bodyN(9,q(3,3)), bodyN(9,q(3,4)), rule(10,0,3,0), head(10,q(3,2)), bodyN(10,q(3,1)), bodyN(10,q(3,3)), bodyN(10,q(3,4)), rule(11,0,3,0), head(11,q(3,3)), bodyN(11,q(3,2)), bodyN(11,q(3,1)), bodyN(11,q(3,4)), rule(12,0,3,0), head(12,q(3,4)), bodyN(12,q(3,2)), bodyN(12,q(3,3)), bodyN(12,q(3,1)), rule(13,0,3,0), head(13,q(4,1)), bodyN(13,q(4,2)), bodyN(13,q(4,3)), bodyN(13,q(4,4)), rule(14,0,3,0), head(14,q(4,2)), bodyN(14,q(4,1)), bodyN(14,q(4,3)), bodyN(14,q(4,4)), rule(15,0,3,0), head(15,q(4,3)), bodyN(15,q(4,2)), bodyN(15,q(4,1)), bodyN(15,q(4,4)), rule(16,0,3,0), head(16,q(4,4)), bodyN(16,q(4,2)), bodyN(16,q(4,3)), bodyN(16,q(4,1)), rule(17,2,0,0), head(17,bot), bodyP(17,q(1,1)), bodyP(17,q(2,1)), rule(18,2,0,0), head(18,bot), bodyP(18,q(1,1)), bodyP(18,q(3,1)), rule(19,2,0,0), head(19,bot), bodyP(19,q(1,1)), bodyP(19,q(4,1)), rule(20,2,0,0), head(20,bot), bodyP(20,q(2,1)), bodyP(20,q(3,1)), rule(21,2,0,0), head(21,bot), bodyP(21,q(2,1)), bodyP(21,q(4,1)), rule(22,2,0,0), head(22,bot), bodyP(22,q(3,1)), bodyP(22,q(4,1)), rule(23,2,0,0), head(23,bot), bodyP(23,q(1,2)), bodyP(23,q(2,2)), rule(24,2,0,0), head(24,bot), bodyP(24,q(1,2)), bodyP(24,q(3,2)), rule(25,2,0,0), head(25,bot), bodyP(25,q(1,2)), bodyP(25,q(4,2)), rule(26,2,0,0), head(26,bot), bodyP(26,q(2,2)), bodyP(26,q(3,2)), rule(27,2,0,0), head(27,bot), bodyP(27,q(2,2)), bodyP(27,q(4,2)), rule(28,2,0,0), head(28,bot), bodyP(28,q(3,2)), bodyP(28,q(4,2)), rule(29,2,0,0), head(29,bot), bodyP(29,q(1,3)), bodyP(29,q(2,3)), rule(30,2,0,0), head(30,bot), bodyP(30,q(1,3)), bodyP(30,q(3,3)), rule(31,2,0,0), head(31,bot), bodyP(31,q(1,3)), bodyP(31,q(4,3)), rule(32,2,0,0), head(32,bot), bodyP(32,q(2,3)), bodyP(32,q(3,3)), rule(33,2,0,0), head(33,bot), bodyP(33,q(2,3)), bodyP(33,q(4,3)), rule(34,2,0,0), head(34,bot), bodyP(34,q(3,3)), bodyP(34,q(4,3)), rule(35,2,0,0), head(35,bot), bodyP(35,q(1,4)), bodyP(35,q(2,4)), rule(36,2,0,0), head(36,bot), bodyP(36,q(1,4)), bodyP(36,q(3,4)), rule(37,2,0,0), head(37,bot), bodyP(37,q(1,4)), bodyP(37,q(4,4)), rule(38,2,0,0), head(38,bot), bodyP(38,q(2,4)), bodyP(38,q(3,4)), rule(39,2,0,0), head(39,bot), bodyP(39,q(2,4)), bodyP(39,q(4,4)), rule(40,2,0,0), head(40,bot), bodyP(40,q(3,4)), bodyP(40,q(4,4)), rule(41,2,0,0), head(41,bot), bodyP(41,q(1,1)), bodyP(41,q(2,2)), rule(42,2,0,0), head(42,bot), bodyP(42,q(1,1)), bodyP(42,q(3,3)), rule(43,2,0,0), head(43,bot), bodyP(43,q(1,1)), bodyP(43,q(4,4)), rule(44,2,0,0), head(44,bot), bodyP(44,q(1,2)), bodyP(44,q(2,3)), rule(45,2,0,0), head(45,bot), bodyP(45,q(1,2)), bodyP(45,q(3,4)), rule(46,2,0,0), head(46,bot), bodyP(46,q(1,2)), bodyP(46,q(2,1)), rule(47,2,0,0), head(47,bot), bodyP(47,q(1,3)), bodyP(47,q(2,4)), rule(48,2,0,0), head(48,bot), bodyP(48,q(1,3)), bodyP(48,q(2,2)), rule(49,2,0,0), head(49,bot), bodyP(49,q(1,3)), bodyP(49,q(3,1)), rule(50,2,0,0), head(50,bot), bodyP(50,q(1,4)), bodyP(50,q(2,3)), rule(51,2,0,0), head(51,bot), bodyP(51,q(1,4)), bodyP(51,q(3,2)), rule(52,2,0,0), head(52,bot), bodyP(52,q(1,4)), bodyP(52,q(4,1)), rule(53,2,0,0), head(53,bot), bodyP(53,q(2,1)), bodyP(53,q(3,2)), rule(54,2,0,0), head(54,bot), bodyP(54,q(2,2)), bodyP(54,q(3,1)), rule(55,2,0,0), head(55,bot), bodyP(55,q(2,2)), bodyP(55,q(3,3)), rule(56,2,0,0), head(56,bot), bodyP(56,q(2,3)), bodyP(56,q(3,2)), rule(57,2,0,0), head(57,bot), bodyP(57,q(2,3)), bodyP(57,q(3,4)), rule(58,2,0,0), head(58,bot), bodyP(58,q(2,4)), bodyP(58,q(3,3)), rule(59,2,0,0), head(59,bot), bodyP(59,q(4,1)), bodyP(59,q(2,3)), rule(60,2,0,0), head(60,bot), bodyP(60,q(4,1)), bodyP(60,q(3,2)), rule(61,2,0,0), head(61,bot), bodyP(61,q(4,1)), bodyP(61,q(1,4)), rule(62,2,0,0), head(62,bot), bodyP(62,q(4,2)), bodyP(62,q(3,3)), rule(63,2,0,0), head(63,bot), bodyP(63,q(4,2)), bodyP(63,q(2,4)), rule(64,2,0,0), head(64,bot), bodyP(64,q(4,2)), bodyP(64,q(3,1)), rule(65,2,0,0), head(65,bot), bodyP(65,q(4,3)), bodyP(65,q(3,4)), rule(66,2,0,0), head(66,bot), bodyP(66,q(4,3)), bodyP(66,q(3,2)), rule(67,2,0,0), head(67,bot), bodyP(67,q(4,3)), bodyP(67,q(2,1)), rule(68,2,0,0), head(68,bot), bodyP(68,q(4,4)), bodyP(68,q(2,2)), rule(69,2,0,0), head(69,bot), bodyP(69,q(4,4)), bodyP(69,q(3,3)), rule(70,2,0,0), head(70,bot), bodyP(70,q(4,4)), bodyP(70,q(1,1)), heads(q(1,2),1), heads(q(1,3),1), heads(q(1,4),1), heads(q(1,1),1), heads(q(2,2),1), heads(q(2,3),1), heads(q(2,4),1), heads(q(2,1),1), heads(q(3,2),1), heads(q(3,3),1), heads(q(3,4),1), heads(q(3,1),1), heads(q(4,2),1), heads(q(4,3),1), heads(q(4,4),1), heads(q(4,1),1), heads(bot,54), choice(1), choice(2), choice(3), choice(4), choice(5), choice(6), choice(7), choice(8), choice(9), choice(10), choice(11), choice(12), choice(13), choice(14), choice(15), choice(16), cleaner, end.
%% Cleaner 

fact(X) \ fact(X) <=> true.
cleaner \ bodyP(_,_) <=> true.
cleaner \ bodyN(_,_) <=> true.
cleaner \ head(_,_) <=> true.
cleaner \ bodyC(_,_) <=> true.
cleaner \ choice(_) <=> true.
cleaner \ choi_frule(_) <=> true.
cleaner \ choi_nrule(_,_,_) <=> true.
cleaner \ nhead(_) <=> true.
cleaner \ nrule(_) <=> true.
cleaner \ rule(_,_,_,_) <=> true.
cleaner \ heads(_,_) <=> true.
cleaner <=> true.

end <=> chr_show_store(user), nl, fail.
